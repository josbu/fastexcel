"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[9373],{29087:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96363);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},91852:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"introduce","title":"Introduction","description":"Introduction","source":"@site/docs/introduce.md","sourceDirName":".","slug":"/","permalink":"/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fesod/edit/main/website/docs/introduce.md","tags":[],"version":"current","frontMatter":{"id":"introduce","title":"Introduction","slug":"/"},"sidebar":"docs","next":{"title":"Guide","permalink":"/docs/quickstart/guide"}}');var a=t(47259),r=t(29087);const s={id:"introduce",title:"Introduction",slug:"/"},o="Apache Fesod (Incubating)",d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:3},{value:"Example",id:"example",level:2},{value:"Read",id:"read",level:3},{value:"Write",id:"write",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"apache-fesod-incubating",children:"Apache Fesod (Incubating)"})}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Apache Fesod (Incubating)"})," is a high-performance and memory-efficient Java library for reading and writing Excel\nfiles, designed to simplify development and ensure reliability."]}),"\n",(0,a.jsx)(n.p,{children:"Apache Fesod (Incubating) can provide developers and enterprises with great freedom and flexibility. We plan to\nintroduce more new features in the future to continually enhance user experience and tool usability. Apache Fesod (\nIncubating) is committed to being your best choice for handling Excel files."}),"\n",(0,a.jsxs)(n.p,{children:["The name fesod(pronounced ",(0,a.jsx)(n.code,{children:"/\u02c8f\u025bs\u0252d/"}),'), an acronym for "fast easy spreadsheet and other documents" expresses the\nproject\'s origin, background and vision.']}),"\n",(0,a.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"High-performance Reading and Writing"}),": Apache Fesod (Incubating) focuses on performance optimization, capable of\nefficiently handling large-scale Excel data. Compared to some traditional Excel processing libraries, it can\nsignificantly reduce memory consumption."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Simplicity and Ease of Use"}),": The library offers a simple and intuitive API, allowing developers to easily integrate\nit into projects, whether for simple Excel operations or complex data processing."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Stream Operations"}),": Apache Fesod (Incubating) supports stream reading, minimizing the problem of loading large\namounts of data at once. This design is especially important when dealing with hundreds of thousands or even millions\nof rows of data."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.h3,{id:"read",children:"Read"}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of reading an Excel document:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Implement the ReadListener interface to set up operations for reading data\npublic class DemoDataListener implements ReadListener<DemoData> {\n    @Override\n    public void invoke(DemoData data, AnalysisContext context) {\n        System.out.println("Parsed a data entry" + JSON.toJSONString(data));\n    }\n\n    @Override\n    public void doAfterAllAnalysed(AnalysisContext context) {\n        System.out.println("All data parsed!");\n    }\n}\n\npublic static void main(String[] args) {\n    String fileName = "demo.xlsx";\n    // Read Excel file\n    FastExcel.read(fileName, DemoData.class, new DemoDataListener()).sheet().doRead();\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"write",children:"Write"}),"\n",(0,a.jsx)(n.p,{children:"Below is a simple example of creating an Excel document:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Sample data class\npublic class DemoData {\n    @ExcelProperty("String Title")\n    private String string;\n    @ExcelProperty("Date Title")\n    private Date date;\n    @ExcelProperty("Number Title")\n    private Double doubleData;\n    @ExcelIgnore\n    private String ignore;\n}\n\n// Prepare data to write\nprivate static List<DemoData> data() {\n    List<DemoData> list = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n        DemoData data = new DemoData();\n        data.setString("String" + i);\n        data.setDate(new Date());\n        data.setDoubleData(0.56);\n        list.add(data);\n    }\n    return list;\n}\n\npublic static void main(String[] args) {\n    String fileName = "demo.xlsx";\n    // Create a "Template" sheet and write data\n    FastExcel.write(fileName, DemoData.class).sheet("Template").doWrite(data());\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);